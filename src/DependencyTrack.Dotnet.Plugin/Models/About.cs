// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace WeMicroIt.DependencyTrack.Dotnet.Models {
    public class About : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The application property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Application { get; set; }
#nullable restore
#else
        public string Application { get; set; }
#endif
        /// <summary>The framework property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public WeMicroIt.DependencyTrack.Dotnet.Models.Framework? Framework { get; set; }
#nullable restore
#else
        public WeMicroIt.DependencyTrack.Dotnet.Models.Framework Framework { get; set; }
#endif
        /// <summary>The systemUuid property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SystemUuid { get; set; }
#nullable restore
#else
        public string SystemUuid { get; set; }
#endif
        /// <summary>The timestamp property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Timestamp { get; set; }
#nullable restore
#else
        public string Timestamp { get; set; }
#endif
        /// <summary>The uuid property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Uuid { get; set; }
#nullable restore
#else
        public string Uuid { get; set; }
#endif
        /// <summary>The version property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Version { get; set; }
#nullable restore
#else
        public string Version { get; set; }
#endif
        /// <summary>
        /// Instantiates a new About and sets the default values.
        /// </summary>
        public About() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static About CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new About();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"application", n => { Application = n.GetStringValue(); } },
                {"framework", n => { Framework = n.GetObjectValue<WeMicroIt.DependencyTrack.Dotnet.Models.Framework>(WeMicroIt.DependencyTrack.Dotnet.Models.Framework.CreateFromDiscriminatorValue); } },
                {"systemUuid", n => { SystemUuid = n.GetStringValue(); } },
                {"timestamp", n => { Timestamp = n.GetStringValue(); } },
                {"uuid", n => { Uuid = n.GetStringValue(); } },
                {"version", n => { Version = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("application", Application);
            writer.WriteObjectValue<WeMicroIt.DependencyTrack.Dotnet.Models.Framework>("framework", Framework);
            writer.WriteStringValue("systemUuid", SystemUuid);
            writer.WriteStringValue("timestamp", Timestamp);
            writer.WriteStringValue("uuid", Uuid);
            writer.WriteStringValue("version", Version);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
